<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="chat">

	<!-- 세션의 사용자 목록 조회 -->
   <select id="chatList_SelectAll" resultType="java.lang.String">
      SELECT USER_NICKNAME FROM LPCHATLIST
   </select>

	<!-- 임시 쿼리 * 세션에 접속한 사용자의 닉네임이 존재한다면 테이블에 저장하지 않도록 체크해주기 위한 쿼리 -->
   <select id="chatList_SelectOne" parameterType="java.lang.String" resultType="java.lang.Integer">
      SELECT COUNT(*) FROM LPCHATLIST WHERE USER_NICKNAME = #{user_nickname}
   </select>

	<!-- 로그인 시 세션에 접속한 사용자의 닉네임을 채팅 가능한 사용자 테이블에 입력 -->
   <insert id="chatList_Insert" parameterType="java.lang.String">
      INSERT INTO LPCHATLIST VALUES(#{user_nickname})
   </insert>

	<!-- 세션 만료시 세션에 없는 사용자의 닉네임을 채팅 리스트에서 제거함 -->
   <delete id="chatList_Delete" parameterType="java.util.List">
      DELETE FROM LPCHATLIST WHERE USER_NICKNAME = #{user_nickname}
   </delete>

	<!-- 채팅방 생성 -->
	<!-- 1. 기존에 상대방과 채팅방이 있는지 확인 -->
   <select id="chatRoom_Check" parameterType="java.util.Map" resultType="java.lang.String">
      SELECT CHR_ID FROM LPCHATROOM WHERE (CHR_SENDER, CHR_RECEIVER) IN
      ((#{sender}, #{receiver}),(#{receiver},#{sender}))
   </select>

	<!-- 2.1 만약에 기존에 만들었던 채팅방이 있다면 나의 채팅 목록에서 보이게 만들어줌 -->
   <update id="chatRoom_Show" parameterType="java.lang.String">
      UPDATE LPCHATROOM SET CHR_SOUT='F', CHR_ROUT = 'F' WHERE CHR_ID = #{chr_id}
   </update>

   <!-- 2.1.1 채팅방이 존재했다면, 모든 채팅 내용을 가져올 수 있도록함 -->
   <select id="chatContent_SelectAll" parameterType="happy.land.people.dto.ChatContentDto" resultType="happy.land.people.dto.ChatContentDto">
      SELECT CHC_ID, CHR_ID, USER_NICKNAME, CHC_MESSAGE, CHC_OUT, CHC_REGDATE FROM LPCHATCONTENT WHERE CHR_ID = #{chr_id} AND USER_NICKNAME = #{user_nickname} AND CHC_OUT = 'F'
   </select>

	<!-- 2.2 기존에 채팅방이 없다면 -> 채팅 리스트에 추가 -->
   <insert id="chatRoom_Insert" parameterType="java.util.Map">
      INSERT INTO LPCHATROOM(CHR_ID, CHR_SENDER, CHR_RECEIVER, CHR_SOUT, CHR_ROUT) VALUES(LPCHATROOM_SEQ.NEXTVAL, #{sender}, #{receiver}, 'F', 'F')
      <selectKey keyProperty="chr_id" resultType="java.lang.String" order="AFTER"><!-- 반환되는 chr_id는 map의 key와 value로 담김 -->
         SELECT LPCHATROOM_SEQ.CURRVAL FROM DUAL
      </selectKey>
   </insert>
   
   <!-- 2.2.1  채팅방 생성시 채팅방의 메시지를 저장해줄 공간을 생성 -->
   <insert id="chatContent_Insert" parameterType="java.util.List">
      <foreach collection="list" item="item" open="INSERT ALL " separator=" " close="SELECT * FROM DUAL">
         INTO LPCHATCONTENT(CHC_ID, CHR_ID, USER_NICKNAME, CHC_MESSAGE, CHC_OUT,
         CHC_REGDATE) VALUES (GET_CONTENT_SEQ, #{item.chr_id}, #{item.user_nickname}, '', 'F', SYSDATE)
      </foreach>
   </insert>
   <!-- 채팅방 생성 -->
   
   <insert id="chatContent_InsertMsg" parameterType="happy.land.people.dto.ChatContentDto">
      INSERT INTO LPCHATCONTENT (CHC_ID, CHR_ID, USER_NICKNAME, CHC_MESSAGE, CHC_OUT,
         CHC_REGDATE) VALUES (GET_CONTENT_SEQ, #{chr_id}, #{user_nickname}, #{chc_message}, 'F', SYSDATE)
   </insert>

   <!-- 양 측 모두 채팅방을 나간 상태를 확인하는 쿼리 -->   
   <select id="chkChatMember" parameterType="java.lang.String" resultType="java.util.Map">
      SELECT CHR_SENDER, CHR_RECEIVER FROM LPCHATROOM WHERE CHR_ID = #{chr_id}
   </select>

   <select id="chkDelflag" parameterType="java.lang.String" resultType="java.lang.String">
      SELECT USER_DELFLAG FROM LPUSER WHERE USER_NICKNAME = #{user_nickname}
   </select>
   
       <!-- selectChr 시작 -->
    <select id="selectChr" parameterType="java.lang.String" resultType="java.util.Map">
    	SELECT CHR_ID, CHR_SENDER, CHR_RECEIVER FROM LPCHATROOM
		WHERE CHR_SENDER = #{id} OR CHR_RECEIVER = #{id}
	</select>
	
	<select id="selectChrListR" parameterType="java.util.Map" resultType="java.util.Map">
		SELECT LPCR.CHR_ID AS CHR_ID, CHR_RECEIVER, CHC_MESSAGE, CHC_REGDATE FROM LPCHATROOM LPCR, LPCHATCONTENT LPCC
		WHERE LPCR.CHR_ID = LPCC.CHR_ID AND CHR_SENDER = #{id} AND CHR_SOUT = 'F'
			AND LPCC.CHC_ID = (SELECT MAX(CHC_ID) CHC_ID FROM LPCHATCONTENT
								WHERE CHR_ID=#{chr_id} AND CHC_OUT='F'
								GROUP BY CHR_ID)
    </select>
    
    <select id="selectChrListS" parameterType="java.util.Map" resultType="java.util.Map">
    	SELECT LPCR.CHR_ID AS CHR_ID, CHR_SENDER AS CHR_RECEIVER, CHC_MESSAGE, CHC_REGDATE FROM LPCHATROOM LPCR, LPCHATCONTENT LPCC
		WHERE LPCR.CHR_ID = LPCC.CHR_ID AND CHR_RECEIVER = #{id} AND CHR_ROUT = 'F'
			AND LPCC.CHC_ID = (SELECT MAX(CHC_ID) CHC_ID FROM LPCHATCONTENT
								WHERE CHR_ID=#{chr_id} AND CHC_OUT='F'
								GROUP BY CHR_ID)
    </select>
    <!-- selectChr 끝 -->
    
    <select id="selectSender" parameterType="java.lang.String" resultType="java.lang.String">
    	SELECT CHR_SENDER FROM LPCHATROOM
		WHERE CHR_ID=#{chrId}
    </select>
    
    <update id="modifyChrout" parameterType="java.util.Map">
    	UPDATE LPCHATROOM SET 
    	<if test="sender != null"> 
    		<choose>
    			<when test="sender == nickname"> <!-- NICKNAME과 CHR_SENDER가 일치하면 CHR_SOUT을 T로 변경 -->
		    		CHR_SOUT='T'
		    	</when>
		    	<when test="sender != nickname"> <!-- 일치하지 않으면 CHR_ROUT을 T로 변경 -->
		    		CHR_ROUT='T'
		    	</when>
    		</choose>
    	</if>
    	WHERE CHR_ID=#{chrId}
    </update>
    
    <update id="modifyChcout" parameterType="java.util.Map">
    	UPDATE LPCHATCONTENT SET CHC_OUT='T'
    	WHERE CHR_ID=#{chrId} AND USER_NICKNAME=#{nickname}
    </update>
    
    <select id="selectChrout" parameterType="java.lang.String" resultType="java.util.Map">
    	SELECT CHR_ROUT, CHR_SOUT FROM LPCHATROOM WHERE CHR_ID=#{chr_id}
    </select>
    
    <delete id="deleteChatroom" parameterType="java.lang.String">
    	DELETE FROM LPCHATROOM WHERE CHR_ID=#{chrId}
    </delete>
</mapper>